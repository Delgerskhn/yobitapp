// Mocks generated by Mockito 5.1.0 from annotations
// in yobit/test/challenge/ui/list_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i12;
import 'dart:convert' as _i14;
import 'dart:typed_data' as _i8;
import 'dart:ui' as _i10;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:flutter/material.dart' as _i7;
import 'package:http/src/base_request.dart' as _i15;
import 'package:http/src/client.dart' as _i13;
import 'package:http/src/response.dart' as _i4;
import 'package:http/src/streamed_response.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:yobit/challenge/api/challenge.repository.dart' as _i11;
import 'package:yobit/challenge/data/challenge.dart' as _i3;
import 'package:yobit/router/navigation.model.dart' as _i6;
import 'package:yobit/task/data/task.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFirebaseFirestore_0 extends _i1.Fake
    implements _i2.FirebaseFirestore {}

class _FakeChallenge_1 extends _i1.Fake implements _i3.Challenge {}

class _FakeResponse_2 extends _i1.Fake implements _i4.Response {}

class _FakeStreamedResponse_3 extends _i1.Fake implements _i5.StreamedResponse {
}

/// A class which mocks [NavigationModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationModel extends _i1.Mock implements _i6.NavigationModel {
  MockNavigationModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set challengeId(String? _challengeId) =>
      super.noSuchMethod(Invocation.setter(#challengeId, _challengeId),
          returnValueForMissingStub: null);
  @override
  set taskId(String? _taskId) =>
      super.noSuchMethod(Invocation.setter(#taskId, _taskId),
          returnValueForMissingStub: null);
  @override
  List<_i7.Page<dynamic>> get stack =>
      (super.noSuchMethod(Invocation.getter(#stack),
          returnValue: <_i7.Page<dynamic>>[]) as List<_i7.Page<dynamic>>);
  @override
  set stack(List<_i7.Page<dynamic>>? _stack) =>
      super.noSuchMethod(Invocation.setter(#stack, _stack),
          returnValueForMissingStub: null);
  @override
  set loggedIn(dynamic value) =>
      super.noSuchMethod(Invocation.setter(#loggedIn, value),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool onPopPage(_i7.Route<dynamic>? route, dynamic result) =>
      (super.noSuchMethod(Invocation.method(#onPopPage, [route, result]),
          returnValue: false) as bool);
  @override
  void onLogin() => super.noSuchMethod(Invocation.method(#onLogin, []),
      returnValueForMissingStub: null);
  @override
  void onLogout() => super.noSuchMethod(Invocation.method(#onLogout, []),
      returnValueForMissingStub: null);
  @override
  void pushFilePreview(String? filepath, _i8.Uint8List? imgData) => super
      .noSuchMethod(Invocation.method(#pushFilePreview, [filepath, imgData]),
          returnValueForMissingStub: null);
  @override
  void pushSignUp() => super.noSuchMethod(Invocation.method(#pushSignUp, []),
      returnValueForMissingStub: null);
  @override
  void pushUpload(_i9.Task? task) =>
      super.noSuchMethod(Invocation.method(#pushUpload, [task]),
          returnValueForMissingStub: null);
  @override
  void pushResetPass() =>
      super.noSuchMethod(Invocation.method(#pushResetPass, []),
          returnValueForMissingStub: null);
  @override
  void pushChallengePage(String? id) =>
      super.noSuchMethod(Invocation.method(#pushChallengePage, [id]),
          returnValueForMissingStub: null);
  @override
  void pushChallengeFromUpload(String? challengeId) => super.noSuchMethod(
      Invocation.method(#pushChallengeFromUpload, [challengeId]),
      returnValueForMissingStub: null);
  @override
  void pushTaskPage(String? id) =>
      super.noSuchMethod(Invocation.method(#pushTaskPage, [id]),
          returnValueForMissingStub: null);
  @override
  void pushConfirmPass() =>
      super.noSuchMethod(Invocation.method(#pushConfirmPass, []),
          returnValueForMissingStub: null);
  @override
  void pushProfile() => super.noSuchMethod(Invocation.method(#pushProfile, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i10.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [ChallengeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChallengeRepository extends _i1.Mock
    implements _i11.ChallengeRepository {
  MockChallengeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore_0()) as _i2.FirebaseFirestore);
  @override
  set firestore(_i2.FirebaseFirestore? _firestore) =>
      super.noSuchMethod(Invocation.setter(#firestore, _firestore),
          returnValueForMissingStub: null);
  @override
  _i12.Future<List<_i3.Challenge>> getFeaturedChallenges() =>
      (super.noSuchMethod(Invocation.method(#getFeaturedChallenges, []),
              returnValue: Future<List<_i3.Challenge>>.value(<_i3.Challenge>[]))
          as _i12.Future<List<_i3.Challenge>>);
  @override
  _i12.Future<List<_i3.Challenge>> getRegularChallenges() =>
      (super.noSuchMethod(Invocation.method(#getRegularChallenges, []),
              returnValue: Future<List<_i3.Challenge>>.value(<_i3.Challenge>[]))
          as _i12.Future<List<_i3.Challenge>>);
  @override
  _i12.Stream<_i2.QuerySnapshot<Map<String, dynamic>>> getIfUserJoinedChallenge(
          String? challengeId) =>
      (super.noSuchMethod(
              Invocation.method(#getIfUserJoinedChallenge, [challengeId]),
              returnValue:
                  Stream<_i2.QuerySnapshot<Map<String, dynamic>>>.empty())
          as _i12.Stream<_i2.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i12.Future<bool> joinChallenge(String? challengeId) =>
      (super.noSuchMethod(Invocation.method(#joinChallenge, [challengeId]),
          returnValue: Future<bool>.value(false)) as _i12.Future<bool>);
  @override
  _i12.Future<_i3.Challenge> getChallenge(String? challengeID) =>
      (super.noSuchMethod(Invocation.method(#getChallenge, [challengeID]),
              returnValue: Future<_i3.Challenge>.value(_FakeChallenge_1()))
          as _i12.Future<_i3.Challenge>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i13.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i4.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i12.Future<_i4.Response>);
  @override
  _i12.Future<_i4.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i12.Future<_i4.Response>);
  @override
  _i12.Future<_i4.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i14.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i12.Future<_i4.Response>);
  @override
  _i12.Future<_i4.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i14.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i12.Future<_i4.Response>);
  @override
  _i12.Future<_i4.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i14.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i12.Future<_i4.Response>);
  @override
  _i12.Future<_i4.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i14.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i4.Response>.value(_FakeResponse_2()))
          as _i12.Future<_i4.Response>);
  @override
  _i12.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i12.Future<String>);
  @override
  _i12.Future<_i8.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i8.Uint8List>.value(_i8.Uint8List(0)))
          as _i12.Future<_i8.Uint8List>);
  @override
  _i12.Future<_i5.StreamedResponse> send(_i15.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_3()))
          as _i12.Future<_i5.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
